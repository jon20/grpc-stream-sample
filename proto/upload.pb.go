// Code generated by protoc-gen-go. DO NOT EDIT.
// source: upload.proto

package upload

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UploadRequest struct {
	VideoData            []byte   `protobuf:"bytes,1,opt,name=VideoData,proto3" json:"VideoData,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadRequest) Reset()         { *m = UploadRequest{} }
func (m *UploadRequest) String() string { return proto.CompactTextString(m) }
func (*UploadRequest) ProtoMessage()    {}
func (*UploadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_upload_b4ceb81d91eb1b59, []int{0}
}
func (m *UploadRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadRequest.Unmarshal(m, b)
}
func (m *UploadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadRequest.Marshal(b, m, deterministic)
}
func (dst *UploadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadRequest.Merge(dst, src)
}
func (m *UploadRequest) XXX_Size() int {
	return xxx_messageInfo_UploadRequest.Size(m)
}
func (m *UploadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UploadRequest proto.InternalMessageInfo

func (m *UploadRequest) GetVideoData() []byte {
	if m != nil {
		return m.VideoData
	}
	return nil
}

type UploadReply struct {
	UploadStatus         string   `protobuf:"bytes,1,opt,name=UploadStatus,proto3" json:"UploadStatus,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadReply) Reset()         { *m = UploadReply{} }
func (m *UploadReply) String() string { return proto.CompactTextString(m) }
func (*UploadReply) ProtoMessage()    {}
func (*UploadReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_upload_b4ceb81d91eb1b59, []int{1}
}
func (m *UploadReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadReply.Unmarshal(m, b)
}
func (m *UploadReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadReply.Marshal(b, m, deterministic)
}
func (dst *UploadReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadReply.Merge(dst, src)
}
func (m *UploadReply) XXX_Size() int {
	return xxx_messageInfo_UploadReply.Size(m)
}
func (m *UploadReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadReply.DiscardUnknown(m)
}

var xxx_messageInfo_UploadReply proto.InternalMessageInfo

func (m *UploadReply) GetUploadStatus() string {
	if m != nil {
		return m.UploadStatus
	}
	return ""
}

func init() {
	proto.RegisterType((*UploadRequest)(nil), "upload.UploadRequest")
	proto.RegisterType((*UploadReply)(nil), "upload.UploadReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UploadHandlerClient is the client API for UploadHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UploadHandlerClient interface {
	Upload(ctx context.Context, opts ...grpc.CallOption) (UploadHandler_UploadClient, error)
}

type uploadHandlerClient struct {
	cc *grpc.ClientConn
}

func NewUploadHandlerClient(cc *grpc.ClientConn) UploadHandlerClient {
	return &uploadHandlerClient{cc}
}

func (c *uploadHandlerClient) Upload(ctx context.Context, opts ...grpc.CallOption) (UploadHandler_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_UploadHandler_serviceDesc.Streams[0], "/upload.UploadHandler/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &uploadHandlerUploadClient{stream}
	return x, nil
}

type UploadHandler_UploadClient interface {
	Send(*UploadRequest) error
	CloseAndRecv() (*UploadReply, error)
	grpc.ClientStream
}

type uploadHandlerUploadClient struct {
	grpc.ClientStream
}

func (x *uploadHandlerUploadClient) Send(m *UploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *uploadHandlerUploadClient) CloseAndRecv() (*UploadReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UploadHandlerServer is the server API for UploadHandler service.
type UploadHandlerServer interface {
	Upload(UploadHandler_UploadServer) error
}

func RegisterUploadHandlerServer(s *grpc.Server, srv UploadHandlerServer) {
	s.RegisterService(&_UploadHandler_serviceDesc, srv)
}

func _UploadHandler_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UploadHandlerServer).Upload(&uploadHandlerUploadServer{stream})
}

type UploadHandler_UploadServer interface {
	SendAndClose(*UploadReply) error
	Recv() (*UploadRequest, error)
	grpc.ServerStream
}

type uploadHandlerUploadServer struct {
	grpc.ServerStream
}

func (x *uploadHandlerUploadServer) SendAndClose(m *UploadReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *uploadHandlerUploadServer) Recv() (*UploadRequest, error) {
	m := new(UploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _UploadHandler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "upload.UploadHandler",
	HandlerType: (*UploadHandlerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _UploadHandler_Upload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "upload.proto",
}

func init() { proto.RegisterFile("upload.proto", fileDescriptor_upload_b4ceb81d91eb1b59) }

var fileDescriptor_upload_b4ceb81d91eb1b59 = []byte{
	// 145 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x2d, 0xc8, 0xc9,
	0x4f, 0x4c, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0x94, 0x74, 0xb9, 0x78,
	0x43, 0xc1, 0xac, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21, 0x19, 0x2e, 0xce, 0xb0, 0xcc,
	0x94, 0xd4, 0x7c, 0x97, 0xc4, 0x92, 0x44, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x9e, 0x20, 0x84, 0x80,
	0x92, 0x21, 0x17, 0x37, 0x4c, 0x79, 0x41, 0x4e, 0xa5, 0x90, 0x12, 0x17, 0x0f, 0x84, 0x1b, 0x5c,
	0x92, 0x58, 0x52, 0x5a, 0x0c, 0x56, 0xcf, 0x19, 0x84, 0x22, 0x66, 0xe4, 0x09, 0xb3, 0xc1, 0x23,
	0x31, 0x2f, 0x25, 0x27, 0xb5, 0x48, 0xc8, 0x82, 0x8b, 0x0d, 0x22, 0x20, 0x24, 0xaa, 0x07, 0x75,
	0x13, 0x8a, 0x13, 0xa4, 0x84, 0xd1, 0x85, 0x0b, 0x72, 0x2a, 0x95, 0x18, 0x34, 0x18, 0x93, 0xd8,
	0xc0, 0x6e, 0x37, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x76, 0x6d, 0x8f, 0xe8, 0xcb, 0x00, 0x00,
	0x00,
}
